<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zwhy.swag.blog.mapper.BlogMapper">
  <resultMap id="BaseResultMap" type="org.zwhy.swag.blog.po.Blog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="first_picture" jdbcType="VARCHAR" property="firstPicture" />
    <result column="flag" jdbcType="VARCHAR" property="flag" />
    <result column="views" jdbcType="INTEGER" property="views" />
    <result column="appreciation" jdbcType="BIT" property="appreciation" />
    <result column="share_statement" jdbcType="BIT" property="shareStatement" />
    <result column="commentable" jdbcType="BIT" property="commentable" />
    <result column="published" jdbcType="BIT" property="published" />
    <result column="recommend" jdbcType="BIT" property="recommend" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <association property="type"
                 javaType="org.zwhy.swag.blog.po.Type"
                 column="type_id"
                 select="org.zwhy.swag.blog.mapper.TypeMapper.getType">
    </association>
    <association property="user"
                 javaType="org.zwhy.swag.blog.po.User"
                 column="user_id"
                 select="org.zwhy.swag.blog.mapper.UserMapper.getUser">
    </association>
  </resultMap>

  <select id="getBlog" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select * from blog where id = #{id} and deleted = 0
  </select>

  <select id="listBlog" resultMap="BaseResultMap">
    select * from blog
    <where>
      deleted = 0
      <if test="title != null">
       and title like concat('%', #{title} ,'%')
      </if>
      <if test="recommend == 1">
        and recommend = 1
      </if>
      <if test="type != null">
        and type_id = #{type.id}
      </if>
    </where>
    order by update_time desc
  </select>

  <select id="getBlogByTitle" resultMap="BaseResultMap">
    select * from blog where title = #{title} and deleted = 0
  </select>
  <select id="listBlogWithoutCondition" resultMap="BaseResultMap">
    select * from blog where deleted = 0 order by update_time desc
  </select>

  <select id="getBlogsByTypeId" resultMap="BaseResultMap">
    select * from blog where type_id = #{typeId} and deleted = 0
  </select>

  <select id="getRecommendBlogs" resultMap="BaseResultMap">
    select * from blog where recommend = 1 and deleted = 0
    limit #{size}
  </select>

  <select id="listBlogByContent" resultMap="BaseResultMap">
    select * from blog where title like concat('%', #{query},'%') or content like concat('%', #{query},'%') and deleted = 0
  </select>

  <update id="deleteBlog" parameterType="java.lang.Long">
    update blog set deleted = 1 where id = #{id}
  </update>


  <insert id="saveBlog" parameterType="org.zwhy.swag.blog.po.Blog">
    <selectKey keyProperty="id" resultType="long" order="AFTER">
      select LAST_INSERT_ID()
    </selectKey>
    insert into blog (title, description, content,
      first_picture, flag, views, 
      appreciation, share_statement, commentable, 
      published, recommend, create_time, 
      update_time, type_id, user_id
      )
    values (#{title}, #{description}, #{content},
      #{firstPicture}, #{flag}, #{views},
      #{appreciation}, #{shareStatement}, #{commentable},
      #{published}, #{recommend}, #{createTime},
      #{updateTime}, #{type.id}, #{user.id}
      )
  </insert>

  <update id="updateBlog" parameterType="org.zwhy.swag.blog.po.Blog">
    update blog
    <set>
      update_time = now(),
      <if test="title != null">
        title = #{title},
      </if>
      <if test="description != null">
        description = #{description},
      </if>
      <if test="content != null">
        content = #{content},
      </if>
      <if test="firstPicture != null">
        first_picture = #{firstPicture},
      </if>
      <if test="flag != null">
        flag = #{flag},
      </if>
      <choose>
        <when test="appreciation != null">
          appreciation = #{appreciation},
        </when>
        <otherwise>
          appreciation = 0,
        </otherwise>
      </choose>
      <choose>
        <when test="shareStatement != null">
          share_statement = #{shareStatement},
        </when>
        <otherwise>
          share_statement = 0,
        </otherwise>
      </choose>
      <choose>
        <when test="commentable != null">
          commentable = #{commentable},
        </when>
        <otherwise>
          commentable = 0,
        </otherwise>
      </choose>
      <choose>
        <when test="published != null">
          published = #{published},
        </when>
        <otherwise>
          published = 0,
        </otherwise>
      </choose>
      <choose>
        <when test="recommend != null">
          recommend = #{recommend},
        </when>
        <otherwise>
          recommend = 0,
        </otherwise>
      </choose>
      <if test="createTime != null">
        create_time = #{createTime},
      </if>
      <if test="type != null">
        type_id = #{type.id},
      </if>
      <if test="user != null">
        user_id = #{user.id},
      </if>
    </set>
    where id = #{id} and deleted = 0
  </update>
  <update id="updateByPrimaryKey" parameterType="org.zwhy.swag.blog.po.Blog">
    update blog
    set title = #{title,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      first_picture = #{firstPicture,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=VARCHAR},
      views = #{views,jdbcType=INTEGER},
      appreciation = #{appreciation,jdbcType=BIT},
      share_statement = #{shareStatement,jdbcType=BIT},
      commentable = #{commentable,jdbcType=BIT},
      published = #{published,jdbcType=BIT},
      recommend = #{recommend,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      type_id = #{typeId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>